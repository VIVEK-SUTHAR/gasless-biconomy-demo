import { Biconomy } from "@biconomy/mexa";
import { ethers } from "ethers";
import Head from "next/head";
import React, { useState } from "react";
import SignCard from "../components/SignCard";
import { SIGNBOOK_ABI, SIGNERBOOK_ADDRESS } from "../data";
import styles from "../styles/Home.module.css";

export default function Home() {
  const [account, setAccount] = useState("");
  const [allSigns, setAllSigns] = useState([]);
  const [input, setInput] = useState("");
  const connectWallet = async () => {
    try {
      const { ethereum } = window;
      if (!ethereum) {
        alert("Please install an ethereum wallet");
        return;
      }
      const provider = new ethers.providers.Web3Provider(ethereum);
      const address = await provider.send("eth_requestAccounts");
      if (address) {
        fetchAllQuotes();
        setAccount(address[0]);
      }
    } catch (error) {
      console.log(error);
    }
  };

  React.useEffect(() => {
    connectWallet();
  }, []);
  React.useEffect(() => {
    fetchAllQuotes();
  }, []);
  const fetchAllQuotes = async () => {
    try {
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner();
      const contractInstance = new ethers.Contract(
        SIGNERBOOK_ADDRESS,
        SIGNBOOK_ABI,
        signer
      );
      const visitors = await contractInstance.getVisitors();
      setAllSigns(visitors);
    } catch (error) {
      console.log(error);
    }
  };

  const sendGasLess = async () => {
    try {
      const biconomy = new Biconomy(window.ethereum, {
        apiKey: process.env.NEXT_PUBLIC_BICONOMY_KEY,
        debug: true,
        contractAddresses: [SIGNERBOOK_ADDRESS],
      });
      const a = await biconomy.init();
      const provider = biconomy.provider;
      const contractInstance = new ethers.Contract(
        SIGNERBOOK_ADDRESS,
        SIGNBOOK_ABI,
        biconomy.ethersProvider
      );
      const { data } = await contractInstance.populateTransaction.addVisitor(
        input,
        account
      );
      let txParams = {
        data: data,
        from: "0xa423A05Eb84EAB65E9137dEabfBD127dc253C052",
        to: "0xE4D776526a354B870c21c4D9D83A39897844e582",
        signatureType: "EIP712_SIGN",
        gasLimit: 5000000,
      };
      provider.send("eth_sendTransaction", [txParams]);
      biconomy.on("transactionHash", (hash) => {
        console.log(hash?.transactionId);
        setTxnHash(hash?.transactionId);
      });
      biconomy.on("txHashGenerated", (data) => {
        setTxnHash(data?.hash);
      });
      biconomy.on("txMined", (data) => {
        console.log(data);
        fetchAllQuotes();
      });
    } catch (error) {}
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div>
          <input
            className={styles.input}
            type={"text"}
            placeholder={"Type your message"}
            value={input}
            onChange={(e) => {
              e.preventDefault();
              setInput(e.target.value);
            }}
          />
          <button onClick={sendGasLess} className={styles.btn}>
            send
          </button>
        </div>
        <h4>Dont woory,this transaction is gasless</h4>
        <div className={styles.grid}>

        {allSigns &&
          allSigns.map((sign, index) => {
            return <SignCard from={sign.from} message={sign.message} />;
          })}
        </div>
      </main>
      <footer className={styles.footer}>
        <a
          href="https://viveksuthar.me"
          target="_blank"
          rel="noopener noreferrer"
        >
          <div>Gasless powered by Biconomy</div>
        </a>
      </footer>
    </div>
  );
}
